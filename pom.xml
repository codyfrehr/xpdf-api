<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--todo: should this be named xpdf "utils"?
            you are not providing they are referred to as "xpdf command line tools" on their website, and the zip you download is called xpdf-tools.
            "xpdftools" may be a better name for artifact..
            -->
    <groupId>io.xpdfutils</groupId>
    <artifactId>xpdf-utils</artifactId>
    <version>4.04.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>common</module>
        <module>pdf-text</module>
        <module>pdf-text-c</module>
    </modules>

    <properties>
        <lombok.version>1.18.28</lombok.version>
        <maven.compiler.plugin.version>3.11.0</maven.compiler.plugin.version>
        <maven.javadoc.plugin.version>3.5.0</maven.javadoc.plugin.version>
        <maven.source.plugin.version>3.3.0</maven.source.plugin.version>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.13.0</version>
            </dependency>
            <dependency>
                <groupId>io.xpdfutils</groupId>
                <artifactId>common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.12.0</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <!--todo: intellij understands how to execute maven wrapper against correct java version.
                               but when running wrapper from command line, wrapper thinks java home is 17, and you get a warning.
                               before running maven on command line, you must set correct java home:
                               set JAVA_HOME=C:\Program Files\Semeru\jdk-8.0.372.7-openj9
                               but honestly, this hardly matters...
                               just install java 8 only on the build system and you wont have to do any weird javac configurations, like bootclasspath
                       -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>
                <!--todo: editors like IDEA/eclipse already give you nice hover-features with just the inclusion of sources - so is this plugin really needed?
                        not sure if this plugin helps to build an api documentation website, but at a later stage, you should figure out how to generate html webpages for javadocs.
                        it could be hosted on official xpdfutils website, looking something like this: https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html
                        -->
<!--                <plugin>-->
<!--                    <groupId>org.apache.maven.plugins</groupId>-->
<!--                    <artifactId>maven-javadoc-plugin</artifactId>-->
<!--                    <version>${maven.javadoc.plugin.version}</version>-->
<!--                    <configuration>-->
<!--                        &lt;!&ndash;todo: any other configs we should include here?&ndash;&gt;-->
<!--                        <source>${maven.compiler.source}</source>-->
<!--                    </configuration>-->
<!--                    <executions>-->
<!--                        <execution>-->
<!--                            <id>attach-javadocs</id>-->
<!--                            <goals>-->
<!--                                <goal>jar</goal>-->
<!--                            </goals>-->
<!--                        </execution>-->
<!--                    </executions>-->
<!--                </plugin>-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven.source.plugin.version}</version>
                    <configuration>
                        <!--todo: any other configs we should include here?-->
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>
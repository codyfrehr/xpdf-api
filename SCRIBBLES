## Release checklist (verify before every release of new package)
- verify all classes (and poms) have correct licensing (run maven license plugin - configured to run automatically during test phase)
- verify all dependencies are GPL3 compatible (run maven license plugin - configured to run automatically during test phase)
- ensure all newly-created modules have correct pom structure and metadata
- upgrade major/minor/patch version
  - major, if fundamental contract change (ie, we no longer include xpdf libs and instead interface directly with them via JNA)
  - minor, if new feature or something relatively significant (ie, add compatibility with PdfImages tool or something)
  - patch, if bug fix or upgrading dependencies (ie, clear new CVE that emerged)
- run snapshot deployment to test process
  - should deploy jar, sources-jar, and javadoc-jar
  - should not have any CVEs tagged on artifact in maven repo
  - you should pull these dependencies and make sure your test projects correctly handle everything

## Change instructions (notes for how to approach changing specific aspects of this codebase)
- if new versions of xpdf binaries added, make sure to also update supporting docs (the Xpdf docs required for GPL3 redistribution, as specified in Xpdf source readme)
- new binaries should be extracted from source archives. project resource structure matches that of source archives, but unrelated files removed (specifically, non-pdftotext bins and docs)
- new classes should have correct license header, java docs, comments, etc (what else? make specific checklist when you formalize these notes)
- new modules/poms should have correct license header, pom metadata, etc

## licensing, helpful links
- another really helpful post https://opensource.stackexchange.com/q/9141
- good gpl3 license FAQ: https://opensource.stackexchange.com/a/6814

## why design decisions were made:
## todo: start recording new notes here. this is important for future development, so we can understand why we took certain design approaches.
## some of this will be important to include as end notes to user
- mission of this library
  - this library should:
    - facilitate programmatic access to xpdf
    - act as an interface to xpdf
    - represent xpdf as purely as possible
  - this library should NOT:
      - replace xpdf
      - obscure xpdf commands
      - try to explain why xpdf works the way it works (this lib is just an interface for xpdf, not a user guide)
  - therefore:
      - individual request options should be nullable because they are *options*.
        we want our request object to represent the command options relayed to xpdf as clearly as possible.
        for example, making "pageBreakExcluded" primitive would result in the option having value "false" by default.
        although this is probably a better coding practice, it makes request object look like user has chosen false (when in reality, they may have chosen nothing, and nothing will be added to actual xpdf commands)
      - individual request options should also be nullable, and not defaulted, because sometimes xpdf does things differently when no option is given!
        for example, the choice to not include a "format" option results in a different format than any of the options, themselves.
        choosing nothing/null is an option, in and of itself, and may result in different functionality under the hood of xpdf (and we dont want to obscure that)
- slf4j chosen because we should let end-user of library choose implementation https://www.slf4j.org/faq.html#configure_logging
- autoconfiguration:
  - followed this guide at first:
    - https://www.baeldung.com/spring-boot-custom-starter
    - https://github.com/eugenp/tutorials/blob/master/spring-boot-modules/spring-boot-custom-starter/greeter-spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories
  - at first, autoconfiguration not detected. but some stack overflow comment mentioned that spring-boot 3 does NOT use spring.factories. instead, had to follow this guide:
    - https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-auto-configuration
    - https://github.com/eugenp/tutorials/blob/master/spring-boot-modules/spring-boot-custom-starter/greeter-library/src/main/java/com/baeldung/greeter/library/Greeter.java
- licensing:
  - OSI and FSF have very different opinions on whether an unmodified, linked library should enforce GPL3 upon the user https://opensource.stackexchange.com/a/2163
    FSF/GNU argue that GPL3 should be enforced https://www.gnu.org/licenses/quick-guide-gplv3.en.html
    OSI would might argue the other way https://www.linuxjournal.com/article/6366
    At the heart of this issue is the question of whether an unmodified, linked library makes any calling program a "derivative work", as described in the linux journal article.
    Considering that xpdf.io is purely an api for xpdf source code, and considering its whole whose purpose is realized in accessing xpdf functionality, it's pretty obvious that xpdf.io should be considered a "derivative work"
    Thus -> we license as GPL3
  - This lib includes other open source libraries utilizing Apache 2.0 license, so they are automatically compatible with GPLv3 https://opensource.stackexchange.com/a/8249
  - This project includes full LICENSE at the root, indicating that it is covered by that license
    - https://www.gnu.org/licenses/gpl-faq.en.html#LicenseCopyOnly
  - This lib uses an awesome open source licensing plugin, https://oss.carbou.me/license-maven-plugin/
    - adds a license header to source files
    - adds a copy of license to release package (todo)
    - verifies all files have proper header (todo)
    - verifies all dependencies are gpl3 compatible (todo)

## future improvements
- in the future, make PdfTextTool extend Callable so that users of sdk can run asynchronously if they would prefer?
  need to explore more on this topic... https://www.baeldung.com/java-single-thread-executor-service
  in general, need a way better understanding of threading concepts, and how that would play into manual process we run, and how native xpdf lib would be affected

## other
- you should password protect your ssh keys. especially when you go live with servers. otherwise, hacker with access to your keys will have passwordless access to your repos
- there is no way for the client to verify that we are including the authentic xpdf binaries in this solution...
  - how can you package the binaries with this solution in a credible way?
  - maybe some way to incorporate the pgp key provided on xpdf website into build/distribution process? https://www.xpdfreader.com/download.html

## local setup:
- install java 8 (ibm semeru) + set project to correct jdk https://developer.ibm.com/languages/java/semeru-runtimes/downloads/
- ???

## user documentation website:
- add section for debugging that explains how to:
  - configure xpdf-api for debug-level logging
  - configure request options for "-verbose" output from native library (which will then be logged in debug mode)

## c++ stuff
- install Windows c++ compiler MinGW via MYSYS2: https://code.visualstudio.com/docs/cpp/config-mingw
- JNI: https://www.baeldung.com/jni
  cd C:\Users\Cody\repos\xpdf-api\pdf-to-text-c\src\main\java\io\xpdftools\pdftotextc
  javac -h . HelloWorldJNI.java
  g++ -c -I"C:\Program Files\Semeru\jdk-17.0.7.7-openj9\include" -I"C:\Program Files\Semeru\jdk-17.0.7.7-openj9\include\win32" io_xpdftools_pdftotextc_HelloWorldJNI.cpp -o io_xpdftools_pdftotextc_HelloWorldJNI.o
  g++ -shared -o native.dll io_xpdftools_pdftotextc_HelloWorldJNI.o -Wl,--add-stdcall-alias
  java -cp . -Djava.library.path="C:\Users\Cody\repos\xpdf-api\pdf-to-text-c\src\main\java\io\xpdftools\pdftotextc" HelloWorldJNI.java
- JNI: https://blog.gitnux.com/code/java-c/
- JNA: https://github.com/java-native-access/jna/tree/7ac44fee3d6b0e47de6d5d10c32be258b9ed1bef#readme
- JNA sample projects: https://github.com/java-native-access/jna/tree/master/contrib
- JNA: https://www.baeldung.com/java-jna-dynamic-libraries
  - JNA build dll from xpdf source code:
  - download source code
  - compile c++ with cmake using MinGW build system generator and vcpkg toolchain
    cmake -S "C:\Users\Cody\Downloads\xpdf-4.04" -B "C:\Users\Cody\Downloads\xpdf-4.04" -G "MinGW Makefiles" -DCMAKE_TOOLCHAIN_FILE="C:\Users\Cody\source\repos\other\vcpkg\scripts\buildsystems\vcpkg.cmake"
  - generate native lib
    g++ -c -I"C:\Program Files\Semeru\jdk-17.0.7.7-openj9\include" -I"C:\Program Files\Semeru\jdk-17.0.7.7-openj9\include\win32" -I"C:\Users\Cody\Downloads\xpdf-4.04" -I"C:\Users\Cody\Downloads\xpdf-4.04\goo" "C:\Users\Cody\Downloads\xpdf-4.04\xpdf\pdftotext.cc" -o "C:\Users\Cody\Downloads\xpdf-4.04\xpdf\pdftotext.o"
    (DOESNT WORK) g++ -shared -o "C:\Users\Cody\Downloads\xpdf-4.04\xpdf\pdftotext.dll" "C:\Users\Cody\Downloads\xpdf-4.04\xpdf\pdftotext.o" -Wl,--add-stdcall-alias
    **** see if you get replies on your xpdf forum post... https://forum.xpdfreader.com/viewforum.php?f=3
- exe maven plugin: https://www.mojohaus.org/exec-maven-plugin/examples/example-exec-using-executabledependency.html
- exe maven plugin: https://support.huaweicloud.com/intl/en-us/codeci_faq/codeci_faq_1036.html

## c++ next steps
- video explaining how to build c++ project: https://www.youtube.com/watch?v=AJRGU_XgVMQ&list=WL&index=34
  - do this yourself and build static windows library that you can import into this project and test running via JNA.
- next, build xpdf library from source code and test running via JNA
  - you may need to alter source code to build as static lib instead of executable (add_executable() in xpdf/CMakeLists.txt)
  - https://cmake.org/cmake/help/latest/command/add_library.html
  - got all this JNI stuff to work! just need to figure out how to compile xpdf stuff in windows.
    part of problem is figuring out linking and stuff like that. seems like you would need to create header file for pdftext.cc.
    before going any further on this, really need to understand better how c++ works and compile process works and linking, etc